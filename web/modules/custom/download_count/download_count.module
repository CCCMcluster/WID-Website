<?php

/**
 * @file
 * Tracks file downloads for files stored in the drupal files table.
 *
 * Using the private files setting or custom private filefield.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Database\Database;
use Drupal\Core\Entity\EntityStorageInterface;
use Drupal\Core\Access\AccessResult;

/**
 * Implements hook_help().
 */
function download_count_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'admin/help#download_count':
      return '<p>' . t('Counts file downloads for private core file fields and
      logs a message to the watchdog table.') . '</p>';
  }
}

/**
 * Implements hook_file_access().
 */
function download_count_file_access($entity, $operation, $account) {
  if ($operation == 'download') {

    /* @var $download_count_service \Drupal\download_count\DownloadCountService */
    $download_count_service = \Drupal::service('download_count_service');

    // Get Config.
    $config = $download_count_service->getConfig();

    // Check flood control.
    if (!$download_count_service->checkFloodControl($entity)) {
      return AccessResult::forbidden();
    }

    // Validate file has extension that should be counted, if not return.
    $extensions = explode(' ', mb_strtolower(trim($config->get('download_count_excluded_file_extensions'))));
    if (count($extensions)) {
      $extension = mb_strtolower(pathinfo($entity->getFilename(), PATHINFO_EXTENSION));
      if (in_array($extension, $extensions)) {
        return AccessResult::forbidden();
      }
    }

    // Try to fetch referencing entity
    $entity_type = NULL;
    $entity_id = NULL;
    $references = file_get_file_references($entity, NULL, EntityStorageInterface::FIELD_LOAD_REVISION, NULL);
    foreach ($references as $entity_map) {
      foreach ($entity_map as $referencing_entities) {
        foreach ($referencing_entities as $referencing_entity) {
          $entity_type = $referencing_entity->getEntityTypeId();
          $entity_id = $referencing_entity->id();
        }
      }
    }

    // If not referencing entity has been found, then abort counting.
    if (!$entity_type || !$entity_id) {
      return AccessResult::forbidden();
    }

    // Add download count.
    $download_count_service->addCount($entity, $account->id(), $entity_type, $entity_id);

    if (Drupal::moduleHandler()->moduleExists('rules')) {
      $host_entity = Drupal::entityTypeManager()
        ->getStorage($entity_type)
        ->load($entity_id);
      if (function_exists('rules_invoke_event')) {
        rules_invoke_event('download_count_file_download', $entity, $account, $host_entity);
      }
    }
  }
}

/**
 * Implements hook_cron().
 *
 * Daily file download counts are cached for convenience.
 */
function download_count_cron() {
  $count = 0;
  $last_cron = Drupal::config('download_count.settings')
    ->get('download_count_last_cron');
  $connection = Database::getConnection();
  $query = $connection->select('download_count', 'd');
  $query->addExpression('UNIX_TIMESTAMP(DATE(FROM_UNIXTIME(timestamp)))', 'date');
  $query->addExpression('COUNT(dcid)', 'count');
  $query->fields('d', ['fid', 'type', 'id']);
  $query->condition('d.timestamp', $last_cron, '>');
  $query->groupBy('d.type');
  $query->groupBy('d.id');
  $query->groupBy('d.fid');
  $query->groupBy('date');
  $result = $query->execute()->fetchAll();
  $queue = Drupal::queue('download_count');
  foreach ($result as $record) {
    $queue->createItem($record);
    $count++;
  }
  if ($count > 0) {
    Drupal::logger('download_count')
      ->notice('Download count queued {$count} new entries for caching.');
  }
  Drupal::service('config.factory')
    ->getEditable('download_count.settings')
    ->set('download_count_last_cron', REQUEST_TIME)
    ->save();
}

/**
 * Implements hook_theme().
 */
function download_count_theme() {
  $theme = [
    'download_count_file_field_formatter' => [
      'variables' => [
        'entity_type' => NULL,
        'entity_id' => NULL,
        'file' => NULL,
        'url' => NULL,
        'attributes' => NULL,
        'count' => NULL,
      ],
    ],
  ];
  return $theme;
}
